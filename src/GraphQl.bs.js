// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE

import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Js_exn from "bs-platform/lib/es6/js_exn.js";
import * as Js_dict from "bs-platform/lib/es6/js_dict.js";
import * as Js_json from "bs-platform/lib/es6/js_json.js";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.js";
import * as Caml_format from "bs-platform/lib/es6/caml_format.js";
import * as ReasonReact from "reason-react/src/ReasonReact.js";
import * as Js_primitive from "bs-platform/lib/es6/js_primitive.js";
import * as ReasonApollo from "reason-apollo/src/ReasonApollo.bs.js";

var ppx_printed_query = "query allUsers($count: Int)  {\nallUsers(count: $count)  {\nfirstName  \nlastName  \n}\n\n}\n";

function parse(value) {
  var match = Js_json.decodeObject(value);
  if (match !== undefined) {
    var match$1 = Js_primitive.valFromOption(match)["allUsers"];
    var tmp;
    if (match$1 !== undefined) {
      var match$2 = Js_json.decodeNull(match$1);
      if (match$2 !== undefined) {
        tmp = undefined;
      } else {
        var match$3 = Js_json.decodeArray(match$1);
        tmp = match$3 !== undefined ? match$3.map((function (value) {
                  var match = Js_json.decodeNull(value);
                  if (match !== undefined) {
                    return undefined;
                  } else {
                    var match$1 = Js_json.decodeObject(value);
                    var tmp;
                    if (match$1 !== undefined) {
                      var value$1 = Js_primitive.valFromOption(match$1);
                      var match$2 = value$1["firstName"];
                      var tmp$1;
                      if (match$2 !== undefined) {
                        var match$3 = Js_json.decodeString(match$2);
                        tmp$1 = match$3 !== undefined ? match$3 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(match$2));
                      } else {
                        tmp$1 = Js_exn.raiseError("graphql_ppx: Field firstName on type User is missing");
                      }
                      var match$4 = value$1["lastName"];
                      var tmp$2;
                      if (match$4 !== undefined) {
                        var match$5 = Js_json.decodeString(match$4);
                        tmp$2 = match$5 !== undefined ? match$5 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(match$4));
                      } else {
                        tmp$2 = Js_exn.raiseError("graphql_ppx: Field lastName on type User is missing");
                      }
                      tmp = {
                        firstName: tmp$1,
                        lastName: tmp$2
                      };
                    } else {
                      tmp = Js_exn.raiseError("graphql_ppx: Object is not a value");
                    }
                    return Js_primitive.some(tmp);
                  }
                })) : Js_exn.raiseError("graphql_ppx: Expected array, got " + JSON.stringify(match$1));
      }
    } else {
      tmp = undefined;
    }
    return {
            allUsers: tmp
          };
  } else {
    return Js_exn.raiseError("graphql_ppx: Object is not a value");
  }
}

function make(count, param) {
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray(/* array */[/* tuple */[
                  "count",
                  count !== undefined ? count : null
                ]]),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var count = variables.count;
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray(/* array */[/* tuple */[
                  "count",
                  count !== undefined ? count : null
                ]]),
          parse: parse
        };
}

function ret_type(f) {
  return /* module */[];
}

var MT_Ret = /* module */[];

var GetAllPersons = /* module */[
  /* ppx_printed_query */ppx_printed_query,
  /* query */ppx_printed_query,
  /* parse */parse,
  /* make */make,
  /* makeWithVariables */makeWithVariables,
  /* ret_type */ret_type,
  /* MT_Ret */MT_Ret
];

var GetAllPersonsQuery = ReasonApollo.CreateQuery([
      ppx_printed_query,
      parse
    ]);

function reducer(action, _state) {
  return /* Update */Block.__(0, [/* record */[/* count */action[0]]]);
}

function initialState(param) {
  return /* record */[/* count */5];
}

function onInputChange(param, $$event) {
  var send = param[/* send */3];
  var match = $$event.target.value;
  if (match !== undefined) {
    var value = match;
    if (value === "") {
      return Curry._1(send, /* SetCount */[0]);
    } else {
      return Curry._1(send, /* SetCount */[Caml_format.caml_int_of_string(value)]);
    }
  } else {
    return /* () */0;
  }
}

var component = ReasonReact.reducerComponent("GraphQl");

function make$1(_children) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              var usersQuery = make(self[/* state */1][/* count */0], /* () */0);
              return React.createElement("div", undefined, "Enter count", React.createElement("input", {
                              autoFocus: true,
                              placeholder: "enter count of persons",
                              type: "text",
                              value: String(self[/* state */1][/* count */0]),
                              onChange: (function (param) {
                                  return onInputChange(self, param);
                                })
                            }), ReasonReact.element(undefined, undefined, Curry.app(GetAllPersonsQuery[/* make */3], [
                                  Js_primitive.some(usersQuery.variables),
                                  undefined,
                                  undefined,
                                  undefined,
                                  undefined,
                                  undefined,
                                  undefined,
                                  undefined,
                                  undefined,
                                  (function (param) {
                                      var result = param[/* result */0];
                                      if (typeof result === "number") {
                                        return React.createElement("div", undefined, "Loading");
                                      } else if (result.tag) {
                                        var match = result[0].allUsers;
                                        return React.createElement("div", undefined, match !== undefined ? Belt_Array.mapWithIndex(match, (function (index, user) {
                                                            var tmp;
                                                            if (user !== undefined) {
                                                              var user$1 = Js_primitive.valFromOption(user);
                                                              tmp = React.createElement(React.Fragment, undefined, user$1.firstName, user$1.lastName);
                                                            } else {
                                                              tmp = "No user";
                                                            }
                                                            return React.createElement("div", {
                                                                        key: String(index)
                                                                      }, tmp);
                                                          })) : "No users fetched");
                                      } else {
                                        return React.createElement("div", undefined, result[0].message);
                                      }
                                    })
                                ])));
            }),
          /* initialState */initialState,
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */reducer,
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

export {
  GetAllPersons ,
  GetAllPersonsQuery ,
  reducer ,
  initialState ,
  onInputChange ,
  component ,
  make$1 as make,
  
}
/* GetAllPersonsQuery Not a pure module */
