// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE

import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as ReasonReact from "reason-react/src/ReasonReact.js";
import * as Formality__Form from "re-formality/src/Formality__Form.bs.js";
import * as Formality__PublicHelpers from "re-formality/src/Formality__PublicHelpers.bs.js";

var passwordRegEx = new RegExp("^.{4,8}$");

var validators_000 = /* record */[
  /* field : Email */0,
  /* strategy : OnFirstSuccessOrFirstBlur */3,
  /* dependents */undefined,
  /* validate */(function (state) {
      var str = state[/* email */0];
      if (str.length > 4) {
        return /* Ok */Block.__(0, [/* Valid */0]);
      } else {
        return /* Error */Block.__(1, ["Too short"]);
      }
    })
];

var validators_001 = /* :: */[
  /* record */[
    /* field : Password */1,
    /* strategy : OnFirstSuccessOrFirstBlur */3,
    /* dependents */undefined,
    /* validate */(function (state) {
        var str = state[/* password */1];
        if (passwordRegEx.test(str)) {
          return /* Ok */Block.__(0, [/* Valid */0]);
        } else {
          return /* Error */Block.__(1, ["Should be 4-8 chars length"]);
        }
      })
  ],
  /* [] */0
];

var validators = /* :: */[
  validators_000,
  validators_001
];

var LoginForm = /* module */[
  /* passwordRegEx */passwordRegEx,
  /* validators */validators
];

var FormContainer = Formality__Form.Make([validators]);

function getFieldStatus(result) {
  if (result !== undefined) {
    var match = result;
    if (match.tag) {
      return match[0];
    } else if (match[0]) {
      return null;
    } else {
      return "valid";
    }
  } else {
    return null;
  }
}

var component = ReasonReact.statelessComponent("Form");

function make(_children) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (_self) {
              return React.createElement(React.Fragment, undefined, React.createElement("a", {
                              href: "https://github.com/alexfedoseev/re-formality"
                            }, "Using ReFormality lib"), ReasonReact.element(undefined, undefined, Curry._3(FormContainer[/* make */3], /* record */[
                                  /* email */"",
                                  /* password */""
                                ], (function (state, param) {
                                    var reset = param[/* reset */2];
                                    var notifyOnSuccess = param[/* notifyOnSuccess */0];
                                    console.log("Submitted with: ", state);
                                    setTimeout((function (param) {
                                            Curry._1(notifyOnSuccess, undefined);
                                            return Curry._1(reset, /* () */0);
                                          }), 2000);
                                    return /* () */0;
                                  }), (function (form) {
                                    var partial_arg = form[/* submit */8];
                                    var partial_arg$1 = Formality__PublicHelpers.Dom[/* preventDefault */0];
                                    var match = form[/* submitting */5];
                                    return React.createElement("form", {
                                                onSubmit: (function (param) {
                                                    return partial_arg$1(partial_arg, param);
                                                  })
                                              }, React.createElement("div", undefined, "Email", React.createElement("input", {
                                                        disabled: form[/* submitting */5],
                                                        value: form[/* state */0][/* email */0],
                                                        onBlur: (function (param) {
                                                            return Curry._1(form[/* blur */7], /* Email */0);
                                                          }),
                                                        onChange: (function ($$event) {
                                                            var init = form[/* state */0];
                                                            return Curry._2(form[/* change */6], /* Email */0, /* record */[
                                                                        /* email */$$event.target.value,
                                                                        /* password */init[/* password */1]
                                                                      ]);
                                                          })
                                                      }), getFieldStatus(Curry._1(form[/* result */2], /* Email */0))), React.createElement("div", undefined, "Password", React.createElement("input", {
                                                        disabled: form[/* submitting */5],
                                                        value: form[/* state */0][/* password */1],
                                                        onBlur: (function (param) {
                                                            return Curry._1(form[/* blur */7], /* Password */1);
                                                          }),
                                                        onChange: (function ($$event) {
                                                            var init = form[/* state */0];
                                                            return Curry._2(form[/* change */6], /* Password */1, /* record */[
                                                                        /* email */init[/* email */0],
                                                                        /* password */$$event.target.value
                                                                      ]);
                                                          })
                                                      }), getFieldStatus(Curry._1(form[/* result */2], /* Password */1))), React.createElement("div", undefined, React.createElement("button", undefined, match ? "Submitting..." : "Submit")));
                                  }))));
            }),
          /* initialState */component[/* initialState */10],
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */component[/* reducer */12],
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

export {
  LoginForm ,
  FormContainer ,
  getFieldStatus ,
  component ,
  make ,
  
}
/* passwordRegEx Not a pure module */
